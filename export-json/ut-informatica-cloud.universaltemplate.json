{
    "agent": null,
    "agentCluster": null,
    "agentClusterVar": null,
    "agentFieldsRestriction": "No Restriction",
    "agentType": "Any",
    "agentVar": null,
    "automaticOutputRetrievalFieldsRestriction": "No Restriction",
    "broadcastCluster": null,
    "broadcastClusterVar": null,
    "createConsole": false,
    "credentialFieldsRestriction": "No Restriction",
    "credentials": null,
    "credentialsVar": null,
    "description": "v1.8",
    "desktopInteract": false,
    "elevateUser": false,
    "environment": [],
    "environmentVariablesFieldsRestriction": "No Restriction",
    "exitCodeOutput": null,
    "exitCodeProcessing": "Success Exitcode Range",
    "exitCodeProcessingFieldsRestriction": "No Restriction",
    "exitCodeText": null,
    "exitCodes": "0",
    "fields": [
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 1",
            "fieldType": "Text",
            "fieldValue": "https://dm-us.informaticacloud.com/ma/api/v2/",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Informatica URL",
            "name": "baseurl",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 0,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "f10ddec7d32443a0ae4b47d344d7c992"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Credential Field 1",
            "fieldType": "Credential",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": true,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Informatica Credentials",
            "name": "cred_inf",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": true,
            "sequence": 1,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "1f98b582fb1045848e28e4edb4625923"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "DSS",
                    "fieldValueLabel": "Synchronization task",
                    "sequence": 0,
                    "sysId": "01281c6b7a574a6d9f6bb43e2ce30402",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "DRS",
                    "fieldValueLabel": "Replication task",
                    "sequence": 1,
                    "sysId": "b6ccfafe15454ed58d7ecc3e4eeb019e",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "MTT",
                    "fieldValueLabel": "Mapping task",
                    "sequence": 2,
                    "sysId": "0cf94b63afd6446cb58cc08aa4b30fde",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "PCS",
                    "fieldValueLabel": "PowerCenter task",
                    "sequence": 3,
                    "sysId": "d0317b1f0e83498aa6c9748c33666fdb",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "WORKFLOW",
                    "sequence": 4,
                    "sysId": "486c4e010a0d411a8966fb19a4331082",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 1",
            "fieldType": "Choice",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Task Type",
            "name": "task_type",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 2,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "25deffd312be49ad8da1f6d961773138"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "INFO",
                    "sequence": 0,
                    "sysId": "023fe5f8924d4faf8193aea7988f8f3c",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "DEBUG",
                    "sequence": 1,
                    "sysId": "e3583c19603e4cc780d8edc1c32f8984",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "WARNING",
                    "sequence": 2,
                    "sysId": "b05ff65d524c4d459a1c1d967fe39745",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "ERROR",
                    "sequence": 3,
                    "sysId": "5a273aa275c94382b3803748101abf79",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "CRITICAL",
                    "sequence": 4,
                    "sysId": "ba4927eadae34ee38bfa97f4f7a478ba",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 2",
            "fieldType": "Choice",
            "fieldValue": "INFO",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": true,
            "hint": "INFO,DEBUG, WARNING, ERROR, CRITICAL",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Loglevel",
            "name": "loglevel",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 3,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "73c6b3d11e7a42f3859e7946d8d0d521"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 3",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": true,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Task Name",
            "name": "task_name",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 4,
            "showIfField": "Choice Field 3",
            "showIfFieldValue": "start_job_by_taskname",
            "sysId": "4d7eaa5a71d34affb7e97d44a31054a7"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 4",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "Task Name incl. Path ../<folder>/<taskname> e.g. job dataload in the folder stonebranch: stonebranch/dataload",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Path",
            "name": "path",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 5,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "356225cc042a4fdd8d895949214dcb44"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 5",
            "fieldType": "Text",
            "fieldValue": "60",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Poll Interval (s)",
            "name": "sleeptime",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 6,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "fc696c7a27214d9b850a14c4ceed2d7d"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": "False",
            "booleanValueType": "Custom",
            "booleanYesValue": "True",
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Boolean Field 1",
            "fieldType": "Boolean",
            "fieldValue": "false",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Print Activity Log",
            "name": "activity_log",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 7,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "67d09cfd68fa46468848837425a5dc67"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 6",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Universal Controller URL",
            "name": "base_url_uac",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 8,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "83e83a86454a48199286da827b510b42"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Credential Field 2",
            "fieldType": "Credential",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Universal Controller Credentials",
            "name": "rest_credentials_uac",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 9,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "10e55c16550b4f67a01f7b8c5c0cf98c"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": "False",
            "booleanValueType": "Custom",
            "booleanYesValue": "True",
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Boolean Field 2",
            "fieldType": "Boolean",
            "fieldValue": "true",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Print Session Log",
            "name": "session_log",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 10,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "ddc92332100b460e9b2c6cdaa12959cb"
        }
    ],
    "name": "ut-informatica-cloud",
    "outputFailureOnly": false,
    "outputReturnFile": null,
    "outputReturnNline": "100",
    "outputReturnSline": "1",
    "outputReturnText": null,
    "outputReturnType": "NONE",
    "outputType": "STDOUT",
    "runtimeDir": null,
    "script": null,
    "scriptTypeWindows": "uapy",
    "scriptUnix": "#!/opt/universal/python3.6/bin/python3\n#\n#\n#    Name   : informaticacloud.py\n#    Origins: Stonebranch\n#    Author : Nils Buer, Abdullah Saglam\n#    Date   : 03-12-2020\n#\n#    Requires Universal Agent for Linux/Windows\n#\n#    Copyright (c) Stonebranch, 2020.  All rights reserved.\n#\n#    Purpose: Start an Informatica WF or Task\n#\n#    Prerequisites:\n#     - Universal Agent for Windows/Linux 6.9 or higher\n#\n#\n#     Version History:\n#     0.6  Nils          2020-12-03   initial\n#     0.7  Nils          2020-12-03   linear wf support\n#     0.8  Abdullah      2020-12-03   unzip of reponse in memory\n#     0.9  Nils/Abdullah 2020-12-09   wf log\n#     1.0  Nils/Abdullah 2020-12-09   json pretty output\n#     1.1  Nils/Abdullah 2020-12-09   misc\n#     1.2  Nils/Abdullah 2020-12-09   task status check added\n#     1.3  Nils/Abdullah 2020-12-09   task status check added\n#     1.4  Nils          2020-12-10   disable uac check if time_diff set to 0\n#     1.5  Nils          2020-12-10   disable uac check if time_diff set to 0\n#     1.6  Nils          2020-12-10   disable uac check if time_diff set to 0\n#     1.7  Nils          2020-12-10   disable uac check if time_diff set to 0\n#     1.8  Nils          2020-12-29   error log extra info\n#\n\n# Used modules\n\nimport io\nimport json\nimport logging\nimport site\nimport sys\nimport time\nimport zipfile\n\nimport requests\n\ngl_version = \"1.8\"\ngl_variable_prefix = \"var\"\ngl_base_url_uac = \"${ops_var_base_url_uac}\".rstrip(\" /\")\ngl_auth_uac = (\"${_credentialUser('${ops_var_rest_credentials_uac}')}\",\n               \"${_credentialPwd('${ops_var_rest_credentials_uac}')}\")\ngl_last_time = time.time()\ngl_time_difference = 0\ngl_start_type = \"${ops_var_start_type}\"\ngl_base_url_inf = \"${ops_var_baseurl}\".rstrip(\" /\")\n\n# https://dm-us.informaticacloud.com/saas/public/core/v3/login\ngl_login_url = f\"{gl_base_url_inf}/public/core/v3/login\"\ngl_logout_url = f\"{gl_base_url_inf}/public/core/v3/logout\"\n\ngl_username = \"${_credentialUser('${ops_var_cred_inf}')}\"\ngl_password = \"${_credentialPwd('${ops_var_cred_inf}')}\"\ngl_task_id = '${ops_var_task_id}'\n# Task Types:\n# - DMASK: Masking task.\n# - DRS: Replication task.\n# - DSS: Synchronization task.\n# - MTT: Mapping task.\n# - PCS: PowerCenter task\ngl_task_type = '${ops_var_task_type}'\ngl_task_name = '${ops_var_task_name}'\ngl_path = '${ops_var_path}'.strip()\ngl_sleep_sec = int(\"${ops_var_sleeptime}\")\ngl_activity_log = str(\"${ops_var_activity_log}\") == \"True\"\n\n# -- logging settings DEBUG, INFO, WARNING, ERROR, CRITICAL\n\nlogging.basicConfig(level=\"${ops_var_loglevel}\",\n                    format=' %(asctime)s - %(levelname)s - %(message)s')\n\n\ndef main():\n    print_variables()\n    # get session_id\n    login_response = get_session_id(gl_username, gl_password, gl_login_url)\n    session_id = login_response[0]\n    server_url = login_response[1]\n\n    logging.debug(f\"Server URL: {server_url}\")\n    logging.debug(f\"session_id: {session_id}\")\n\n    # Start Informatica Job\n    global_id = lookup_global_id(session_id, server_url, gl_path, gl_task_type)\n    start_job_by_global_id(session_id, server_url, global_id, gl_task_type,\n                           gl_sleep_sec, gl_logout_url, gl_activity_log)\n    logout_session(session_id, gl_logout_url)\n\n\ndef print_variables():\n    \"\"\"logging.infos out the python and script version\n    and all universal template variables\n    \"\"\"\n    logging.info(\"Python version <<< \" + sys.version + \" >>>\")\n    logging.info(\"Python sites <<< \" + str(site.getsitepackages()) + \" >>>\")\n    logging.info(\"Executing task version \" + gl_version + \" with the following \"\n                                                          \"parameters\")\n    print_defined_variables(gl_variable_prefix)\n\n\ndef print_defined_variables(variable_prefix):\n    \"\"\"logging.infos out universal template variables\"\"\"\n    all_variables = r\"${_scope}\"\n    separate_variables = [variable for variable in all_variables.split(', ') if\n                          \"ops_\" + variable_prefix in variable]\n    logging.info(str(separate_variables).replace(\", \", \",\\n\"))\n\n\nclass SbRestApi:\n    \"\"\"Stonebranch REST API Class for python\n\n    This class is written for web service operations to UAC\n\n    Attributes:\n        _base_url: base uac url\n        _auth_uac: authentication for uac\n        _library_version: keeps the class library version\n    \"\"\"\n\n    def __init__(self, base_url, authentication):\n        self._base_url = base_url\n        self._auth_uac = authentication\n        self._library_version = \"1.0\"\n        logging.info(\n            \"REST SB library version \" + self._library_version)\n\n    def check_task_status(self):\n        logging.info('Checking task status %s' % \"${ops_task_id}\")\n        task_states = \"queued,defined,time_wait,started,\" \\\n                      \"running,resource_wait,resource_requested,started\"\n        url = '%s/resources/taskinstance/list' % self._base_url\n        logging.debug('URL: %s' % url)\n        local_headers = {'Content-Type': 'application/json',\n                         'Accept': 'application/json'}\n        data_str = \"\"\"{\"sysId\": \"${ops_task_id}\"}\"\"\"\n        logging.debug(data_str)\n        response = requests.post(url, headers=local_headers, data=data_str,\n                                 auth=self._auth_uac, stream=True, verify=False)\n\n        if 200 != response.status_code:\n            logging.error('Response: %s' % response.text)\n            exit(1)\n        else:\n            logging.debug('Response 200 received %s' % response.text)\n\n        resp_json = None\n        try:\n            resp_json = response.json()\n            # ...\n        except ValueError:\n            # no JSON returned\n            pass\n        logging.debug(f\"received data: {resp_json}\")\n\n        if \"status\" in response.text:\n            task_status = resp_json[0][\"status\"]\n            logging.debug('STATUS: %s' % task_status)\n            if task_status.lower() in task_states:\n                return True\n            else:\n                return False\n        else:\n            logging.debug(\"Task is not existing\")\n            return False\n\n\ndef get_session_id(username, password, login_url):\n    \"\"\"Authenticate with username and password and\n       retrieve icSessionId and serverUrl that are\n       used for Subsequent API calls\n    \"\"\"\n    session_id = ''\n    data = {'username': username, 'password': password}\n    # url = \"https://dm-us.informaticacloud.com/saas/public/core/v3/login\"\n    url = login_url\n\n    headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    # We need to pass data in string instead of dict\n    # so that the data gets posted directly.\n    response = requests.post(url, data=json.dumps(data), headers=headers)\n    logging.info(f\"API Response Status Code: {str(response.status_code)}\")\n    server_url = 0\n    resp_json = None\n    try:\n        resp_json = response.json()\n        # ...\n    except ValueError:\n        # no JSON returned\n        pass\n    if response.status_code == 200:\n        logging.debug(response.text)\n        session_id = resp_json[\"userInfo\"][\"sessionId\"]  # INFA-SESSION-ID\n        server_url = resp_json[\"products\"][0][\"baseApiUrl\"]\n        logging.info(f\"Session Id: {session_id} and server_url: {server_url}\")\n    else:\n        logging.error('API call failed:')\n        logging.error(response.headers)\n        logging.error(resp_json)\n        exit(1)\n    return session_id, server_url\n\n\ndef logout_session(session_id, logout_url):\n    \"\"\"Use Session Id and Server URL to logout from API\"\"\"\n    logging.debug(f\"in logout_session with session_id: {session_id}\")\n    headers = {'Content-Type': 'application/json',\n               'INFA-SESSION-ID': session_id,\n               'Accept': 'application/json'}\n\n    response = requests.post(logout_url, headers=headers)\n    if response.status_code == 200:\n        logging.debug(\n            f\"session logout for session_id: {session_id} \"\n            f\"successful with status_code: {response.status_code}\")\n    else:\n        logging.error(\n            f\"session logout failed with status: {response.status_code}\")\n        # logging.info(response.content)\n        logging.error(f\"{response.content}\")\n        exit(1)\n\n\ndef lookup_global_id(session_id, server_url, path, task_type):\n    \"\"\"Use Session Id and Server URL from the user login API\n       to lookup the globalid for the given type and folder \"\"\"\n    logging.debug(\n        f\"in lookup_globalid with path: {path} and taskType: {task_type}\")\n    inf_url = server_url + \"/public/core/v3/lookup\"\n    # inf_url = \"https://dm-us.informaticacloud.com/saas/public/core/v3/lookup\"\n    logging.debug(f\"complete URL for Lookup: {inf_url}\")\n    headers = {'Content-Type': 'application/json',\n               'INFA-SESSION-ID': session_id,\n               'Accept': 'application/json'}\n    # data = {'path': path, 'type': taskType}\n    data = {\n        'objects': [\n            {\n                'path': path,\n                'type': task_type\n            }]\n    }\n\n    response = requests.post(inf_url, json=data, headers=headers)\n    global_id = 0\n    if response.status_code == 200:\n        global_id = response.json()[\"objects\"][0][\"id\"]\n        logging.debug(f\"Global Id: {global_id}\")\n        logging.debug(f\"header: {response.headers}\")\n        logging.debug(f\"content: {response.content}\")\n    else:\n        logging.error(\n            f\"lookup_global_id failed with status: {response.status_code}\")\n        # logging.info(response.content)\n        logging.error(f\"{response.content}\")\n        exit(1)\n    return global_id\n\n\ndef start_job_by_global_id(session_id, server_url, global_id, task_type,\n                           sleep_sec, logout_url, activity_log):\n    \"\"\"Use Session Id and Server URL from the user login API\n       and start the specified job\"\"\"\n    logging.debug(f\"in start_job_by_global_id with global_id = {global_id}\")\n    inf_url = server_url + \"/api/v2/job\"\n    headers = {'Content-Type': 'application/json',\n               'icSessionId': session_id,\n               'Accept': 'application/json'}\n    data = {'@type': 'job', 'taskFederatedId': global_id, 'taskType': task_type}\n    response = requests.post(inf_url, data=json.dumps(data), headers=headers)\n    resp_json = None\n    try:\n        resp_json = response.json()\n        # ...\n    except ValueError:\n        # no JSON returned\n        pass\n\n    if response.status_code == 200:\n        run_id = resp_json[\"runId\"]\n        task_name = resp_json[\"taskName\"]\n        task_id = resp_json[\"taskId\"]\n        logging.info(\n            f\"Job: {task_name} with Id: {task_id} and global_id: {global_id} \"\n            f\"has been successfully started with runId: {run_id}\")\n        # get the job status\n        get_activity_log(session_id, server_url, run_id, task_id, sleep_sec,\n                         logout_url, activity_log)\n    else:\n        logging.error(\n            f\"Job failed to start with status: {response.status_code}\")\n        # logging.info(response.content)\n        logging.error(f\"{response.content}\")\n        logout_session(session_id, logout_url)\n        exit(1)\n\n\ndef get_activity_log(session_id, server_url, run_id, task_id, sleep_sec,\n                     logout_url, activity_log):\n    \"\"\"polls the informatica cloud server in the provided sleep_sec-interval\n       to check if the job has been completed or failed.\n       In case of success the session log is retrieved.\n       In case of failure the error log is retrieved.\n    \"\"\"\n    global gl_last_time\n    rest = SbRestApi(gl_base_url_uac, gl_auth_uac)\n    # job_state = 99\n    task_name = ''\n    object_name = ''\n    logging.debug(\n        f\"in get_activity_log for Job with ID: {task_id}, \"\n        f\"run_id = {run_id} and sessionId = {session_id}\")\n    inf_url = f\"{server_url}/api/v2/activity/activityLog\" \\\n              f\"?runId={run_id}&taskId={task_id}\"\n    headers = {'Content-Type': 'application/json',\n               'icSessionId': session_id,\n               'Accept': 'application/json'}\n    while True:\n        if gl_time_difference:\n            time_now = time.time()\n            if time_now - gl_last_time > gl_time_difference:\n                gl_last_time = time_now\n                if not rest.check_task_status():\n                    logging.info(f\"Exiting\")\n                    exit(1)\n        response = requests.get(inf_url, headers=headers)\n        logging.debug(f\"Activity Log: {response.text}\")\n        resp_json = None\n        try:\n            resp_json = response.json()\n            # ...\n        except ValueError:\n            # no JSON returned\n            pass\n\n        if activity_log is True and response.text:\n            # pprint(response.json())\n            logging.info(json.dumps(resp_json, indent=4))\n\n        if response.status_code == 200:\n            try:\n                job_state = resp_json[0][\"state\"]\n                log_id = resp_json[0][\"id\"]  # Log entry ID\n                object_name = resp_json[0][\"objectName\"]\n                job_type = resp_json[0][\"type\"]\n                # 1 : task failed to complete successfully.\n                # 2 : task finished with errors\n                # 3 : task failed to complete\n            except Exception as unknown_exception:\n                logging.info(\n                    f\"No log entry found - continue after {sleep_sec} seconds\")\n                time.sleep(sleep_sec)\n                continue\n\n            if job_state == 1:\n                job_status = \"success\"\n                logging.info(\n                    f\"Status of Job {object_name} with task_id: {task_id}, \"\n                    f\"runId = {run_id} is: {job_status}({job_state})\")\n                logging.info(f\"retrieving session_log file\")\n                logging.debug(f\"log header: {response.headers}\")\n                logging.debug(f\"log content: {response.content}\")\n\n                # get_session_log(session_id, server_url, run_id, task_id,\n                #                 log_id, object_name, logout_url)\n                for entry_id in resp_json[0]['entries']:\n                    logging.info(entry_id['id'])\n                    item_id = entry_id['id']\n                    get_session_log_item(session_id, server_url, run_id,\n                                         task_id,\n                                         log_id, object_name, logout_url,\n                                         item_id)\n                break\n            elif job_state == 2:\n                job_status = \"errors\"\n                if job_type == \"WORKFLOW\":\n                    error_msg = resp_json[0][\"errorMsg\"]\n                else:\n                    error_msg = resp_json[0][\"entries\"][0][\"errorMsg\"]\n                logging.error(\n                    f\"Job {object_name} with task_id: {task_id}, \"\n                    f\"runId = {run_id} \"\n                    f\"has finished with {job_status}({job_state})\")\n                logging.error(f\"error message is: {error_msg}\")\n                get_error_log(session_id, server_url, run_id, task_id, log_id,\n                              object_name, logout_url)\n                # get_session_log(session_id, server_url, run_id, task_id,\n                #                 log_id,\n                #                 object_name, logout_url)\n                for entry_id in resp_json[0]['entries']:\n                    logging.info(entry_id['id'])\n                    item_id = entry_id['id']\n                    get_session_log_item(session_id, server_url, run_id,\n                                         task_id,\n                                         log_id, object_name, logout_url,\n                                         item_id)\n                    if entry_id['state'] == 2:\n                        get_error_log_item(session_id, server_url, run_id, task_id,\n                                      log_id,\n                                      object_name, logout_url, item_id)\n\n                logout_session(session_id, logout_url)\n                exit(1)\n            elif job_state == 3:\n                job_status = \"failed\"\n\n                if job_type == \"WORKFLOW\":\n                    error_msg = resp_json[0][\"errorMsg\"]\n                else:\n                    error_msg = resp_json[0][\"entries\"][0][\"errorMsg\"]\n\n                logging.error(\n                    f\"Job {object_name} with task_id: {task_id}, \"\n                    f\"runId = {run_id} \"\n                    f\"has {job_status}({job_state})\")\n                logging.error(f\"error message is: {error_msg}\")\n                # in status \"failed\" a session log is available,\n                # but no error log\n                # get_session_log(session_id, server_url, run_id, task_id,\n                #                 log_id,\n                #                 object_name, logout_url)\n                for entry_id in resp_json[0]['entries']:\n                    logging.info(entry_id['id'])\n                    item_id = entry_id['id']\n                    get_session_log_item(session_id, server_url, run_id,\n                                         task_id,\n                                         log_id, object_name, logout_url,\n                                         item_id)\n                logout_session(session_id, logout_url)\n                exit(1)\n        else:\n            logging.error(\n                f\"Job status could not be fetched, \"\n                f\"error code:: {response.status_code}\")\n            # logging.info(response.content)\n            logging.error(f\"{response.content}\")\n            logout_session(session_id, logout_url)\n            exit(1)\n\n\ndef get_session_log(session_id, server_url, run_id, task_id, log_id,\n                    object_name, logout_url):\n    # time.sleep(10)\n    \"\"\"get the session log after the job has been completed\"\"\"\n    # job_status = 99\n    logging.debug(\n        f\"in get_session_log for Job: {object_name}, runId = {run_id} \"\n        f\"and sessionId = {session_id}\")\n    inf_url = f\"{server_url}/api/v2/activity/activityLog/{log_id}/sessionLog\"\n    headers = {'Content-Type': 'application/json',\n               'icSessionId': session_id,\n               'Accept': 'application/json',\n               'Accept-Encoding': 'gzip'}\n    response = requests.get(inf_url, headers=headers)\n    if response.status_code == 200:\n        logging.info(\n            f\"Session Log for Job {object_name} with task_id: {task_id}, \"\n            f\"runId = {run_id}, sessionId = {session_id} and \"\n            f\"log id = {log_id} has been successfully fetched\")\n        logging.info(\n            f\"##### session log for task : {object_name}, \"\n            f\"runID: {run_id} and log Id: {log_id} #####\")\n\n        content_type = response.headers.get('content-type')\n        if \"zip\" in content_type:\n            input_zip = zipfile.ZipFile(io.BytesIO(response.content))\n            extracted = {name: input_zip.read(name) for name in\n                         input_zip.namelist()}\n            logging.info(str(extracted).replace(\"\\\\n\", \"\\n\"))\n        else:\n            logging.info(response.text)\n    else:\n        logging.error(\n            f\"Session Log for Job {object_name} with task_id: {task_id}, \"\n            f\"runId = {run_id} could not be fetched, \"\n            f\"error code: {response.status_code}\")\n        # logging.info(response.content)\n        logging.error(f\"{response.content}\")\n        logout_session(session_id, logout_url)\n        exit(1)\n\n\ndef get_session_log_item(session_id, server_url, run_id, task_id, log_id,\n                         object_name, logout_url, item_id):\n    # time.sleep(10)\n    \"\"\"get the session log after the job has been completed\"\"\"\n    # job_status = 99\n    logging.debug(\n        f\"in get_session_log for Job: {object_name}, runId = {run_id} \"\n        f\"and sessionId = {session_id}\")\n    inf_url = f\"{server_url}/api/v2/activity/activityLog/{log_id}/sessionLog?itemId={item_id}\"\n    headers = {'Content-Type': 'application/json',\n               'icSessionId': session_id,\n               'Accept': 'application/json',\n               'Accept-Encoding': 'gzip'}\n    response = requests.get(inf_url, headers=headers)\n    if response.status_code == 200:\n        logging.info(\n            f\"Session Log for Job {object_name} with task_id: {task_id}, \"\n            f\"runId = {run_id}, sessionId = {session_id} and \"\n            f\"log id = {log_id} has been successfully fetched\")\n        logging.info(\n            f\"##### session log for task : {object_name}, \"\n            f\"runID: {run_id} and log Id: {log_id} #####\")\n\n        content_type = response.headers.get('content-type')\n        if \"zip\" in content_type:\n            input_zip = zipfile.ZipFile(io.BytesIO(response.content))\n            extracted = {name: input_zip.read(name) for name in\n                         input_zip.namelist()}\n            logging.info(str(extracted).replace(\"\\\\n\", \"\\n\"))\n        else:\n            logging.info(response.text)\n    else:\n        logging.error(\n            f\"Session Log for Job {object_name} with task_id: {task_id}, \"\n            f\"runId = {run_id} could not be fetched, \"\n            f\"error code: {response.status_code}\")\n        # logging.info(response.content)\n        logging.error(f\"{response.content}\")\n        logout_session(session_id, logout_url)\n        exit(1)\n\n\ndef get_error_log(session_id, server_url, run_id, task_id, log_id, object_name,\n                  logout_url):\n    time.sleep(10)\n    \"\"\"get the error log after the job has finished with errors\"\"\"\n    # job_status = 99\n    logging.debug(\n        f\"in get_error_log for Job: {object_name}, \"\n        f\"runId = {run_id} and sessionId = {session_id}\")\n    inf_url = f\"{server_url}/api/v2/activity/errorLog/{log_id}\"\n    # /api/v2/activity/errorLog/id\n    headers = {'Content-Type': 'application/json',\n               'icSessionId': session_id,\n               'Accept': 'application/json'}\n    response = requests.get(inf_url, headers=headers)\n\n    if response.status_code == 200:\n        logging.info(\n            f\"Error Log for Job {object_name} with task_id: {task_id}, \"\n            f\"runId = {run_id}, sessionId = {session_id} and \"\n            f\"log id = {log_id} has been successfully fetched\")\n        logging.info(\n            f\"##### Error log for task: {object_name}, runId: {run_id} \"\n            f\"and log Id: {log_id} #####\")\n        logging.info(response.text)\n    else:\n        logging.error(\n            f\"Error Log for Job {object_name} with task_id: {task_id}, \"\n            f\"runId = {run_id} could not be fetched, \"\n            f\"error code: {response.status_code}\")\n        logging.error(\"Error log can be retrieved from the Informatica Monitor\")\n        # logging.info(response.content)\n        logging.error(f\"{response.content}\")\n        # logout_session(session_id, logout_url)\n        # exit(1)\n\n\ndef get_error_log_item(session_id, server_url, run_id, task_id, log_id, object_name,\n                  logout_url, item_id):\n    time.sleep(10)\n    \"\"\"get the error log after the job has finished with errors\"\"\"\n    # job_status = 99\n    logging.debug(\n        f\"in get_error_log for Job: {object_name}, \"\n        f\"runId = {run_id} and sessionId = {session_id}\")\n    inf_url = f\"{server_url}/api/v2/activity/errorLog/{log_id}?itemId={item_id}\"\n    # /api/v2/activity/errorLog/id\n    headers = {'Content-Type': 'application/json',\n               'icSessionId': session_id,\n               'Accept': 'application/json'}\n    response = requests.get(inf_url, headers=headers)\n\n    if response.status_code == 200:\n        logging.info(\n            f\"Error Log for Job {object_name} with task_id: {task_id}, \"\n            f\"runId = {run_id}, sessionId = {session_id} and \"\n            f\"log id = {log_id} has been successfully fetched\")\n        logging.info(\n            f\"##### Error log for task: {object_name}, runId: {run_id} \"\n            f\"and log Id: {log_id} #####\")\n        logging.info(response.text)\n    else:\n        logging.error(\n            f\"Error Log for Job {object_name} with task_id: {task_id}, \"\n            f\"runId = {run_id} could not be fetched, \"\n            f\"error code: {response.status_code}\")\n        logging.error(\"Error log can be retrieved from the Informatica Monitor\")\n        # logging.info(response.content)\n        logging.error(f\"{response.content}\")\n        # logout_session(session_id, logout_url)\n        # exit(1)\n\n\nif __name__ == '__main__':\n    main()\n",
    "scriptWindows": "#!/opt/universal/python3.6/bin/python3\n#\n#\n#    Name   : informaticacloud.py\n#    Origins: Stonebranch\n#    Author : Nils Buer, Abdullah Saglam\n#    Date   : 03-12-2020\n#\n#    Requires Universal Agent for Linux/Windows\n#\n#    Copyright (c) Stonebranch, 2020.  All rights reserved.\n#\n#    Purpose: Start an Informatica WF or Task\n#\n#    Prerequisites:\n#     - Universal Agent for Windows/Linux 6.9 or higher\n#\n#\n#     Version History:\n#     0.6  Nils          2020-12-03   initial\n#     0.7  Nils          2020-12-03   linear wf support\n#     0.8  Abdullah      2020-12-03   unzip of reponse in memory\n#     0.9  Nils/Abdullah 2020-12-09   wf log\n#     1.0  Nils/Abdullah 2020-12-09   json pretty output\n#     1.1  Nils/Abdullah 2020-12-09   misc\n#     1.2  Nils/Abdullah 2020-12-09   task status check added\n#     1.3  Nils/Abdullah 2020-12-09   task status check added\n#     1.4  Nils          2020-12-10   disable uac check if time_diff set to 0\n#     1.5  Nils          2020-12-10   disable uac check if time_diff set to 0\n#     1.6  Nils          2020-12-10   disable uac check if time_diff set to 0\n#     1.7  Nils          2020-12-10   disable uac check if time_diff set to 0\n#     1.8  Nils          2020-12-29   error log extra info\n#\n\n# Used modules\n\nimport io\nimport json\nimport logging\nimport site\nimport sys\nimport time\nimport zipfile\n\nimport requests\n\ngl_version = \"1.8\"\ngl_variable_prefix = \"var\"\ngl_base_url_uac = \"${ops_var_base_url_uac}\".rstrip(\" /\")\ngl_auth_uac = (\"${_credentialUser('${ops_var_rest_credentials_uac}')}\",\n               \"${_credentialPwd('${ops_var_rest_credentials_uac}')}\")\ngl_last_time = time.time()\ngl_time_difference = 0\ngl_start_type = \"${ops_var_start_type}\"\ngl_base_url_inf = \"${ops_var_baseurl}\".rstrip(\" /\")\n\n# https://dm-us.informaticacloud.com/saas/public/core/v3/login\ngl_login_url = f\"{gl_base_url_inf}/public/core/v3/login\"\ngl_logout_url = f\"{gl_base_url_inf}/public/core/v3/logout\"\n\ngl_username = \"${_credentialUser('${ops_var_cred_inf}')}\"\ngl_password = \"${_credentialPwd('${ops_var_cred_inf}')}\"\ngl_task_id = '${ops_var_task_id}'\n# Task Types:\n# - DMASK: Masking task.\n# - DRS: Replication task.\n# - DSS: Synchronization task.\n# - MTT: Mapping task.\n# - PCS: PowerCenter task\ngl_task_type = '${ops_var_task_type}'\ngl_task_name = '${ops_var_task_name}'\ngl_path = '${ops_var_path}'.strip()\ngl_sleep_sec = int(\"${ops_var_sleeptime}\")\ngl_activity_log = str(\"${ops_var_activity_log}\") == \"True\"\n\n# -- logging settings DEBUG, INFO, WARNING, ERROR, CRITICAL\n\nlogging.basicConfig(level=\"${ops_var_loglevel}\",\n                    format=' %(asctime)s - %(levelname)s - %(message)s')\n\n\ndef main():\n    print_variables()\n    # get session_id\n    login_response = get_session_id(gl_username, gl_password, gl_login_url)\n    session_id = login_response[0]\n    server_url = login_response[1]\n\n    logging.debug(f\"Server URL: {server_url}\")\n    logging.debug(f\"session_id: {session_id}\")\n\n    # Start Informatica Job\n    global_id = lookup_global_id(session_id, server_url, gl_path, gl_task_type)\n    start_job_by_global_id(session_id, server_url, global_id, gl_task_type,\n                           gl_sleep_sec, gl_logout_url, gl_activity_log)\n    logout_session(session_id, gl_logout_url)\n\n\ndef print_variables():\n    \"\"\"logging.infos out the python and script version\n    and all universal template variables\n    \"\"\"\n    logging.info(\"Python version <<< \" + sys.version + \" >>>\")\n    logging.info(\"Python sites <<< \" + str(site.getsitepackages()) + \" >>>\")\n    logging.info(\"Executing task version \" + gl_version + \" with the following \"\n                                                          \"parameters\")\n    print_defined_variables(gl_variable_prefix)\n\n\ndef print_defined_variables(variable_prefix):\n    \"\"\"logging.infos out universal template variables\"\"\"\n    all_variables = r\"${_scope}\"\n    separate_variables = [variable for variable in all_variables.split(', ') if\n                          \"ops_\" + variable_prefix in variable]\n    logging.info(str(separate_variables).replace(\", \", \",\\n\"))\n\n\nclass SbRestApi:\n    \"\"\"Stonebranch REST API Class for python\n\n    This class is written for web service operations to UAC\n\n    Attributes:\n        _base_url: base uac url\n        _auth_uac: authentication for uac\n        _library_version: keeps the class library version\n    \"\"\"\n\n    def __init__(self, base_url, authentication):\n        self._base_url = base_url\n        self._auth_uac = authentication\n        self._library_version = \"1.0\"\n        logging.info(\n            \"REST SB library version \" + self._library_version)\n\n    def check_task_status(self):\n        logging.info('Checking task status %s' % \"${ops_task_id}\")\n        task_states = \"queued,defined,time_wait,started,\" \\\n                      \"running,resource_wait,resource_requested,started\"\n        url = '%s/resources/taskinstance/list' % self._base_url\n        logging.debug('URL: %s' % url)\n        local_headers = {'Content-Type': 'application/json',\n                         'Accept': 'application/json'}\n        data_str = \"\"\"{\"sysId\": \"${ops_task_id}\"}\"\"\"\n        logging.debug(data_str)\n        response = requests.post(url, headers=local_headers, data=data_str,\n                                 auth=self._auth_uac, stream=True, verify=False)\n\n        if 200 != response.status_code:\n            logging.error('Response: %s' % response.text)\n            exit(1)\n        else:\n            logging.debug('Response 200 received %s' % response.text)\n\n        resp_json = None\n        try:\n            resp_json = response.json()\n            # ...\n        except ValueError:\n            # no JSON returned\n            pass\n        logging.debug(f\"received data: {resp_json}\")\n\n        if \"status\" in response.text:\n            task_status = resp_json[0][\"status\"]\n            logging.debug('STATUS: %s' % task_status)\n            if task_status.lower() in task_states:\n                return True\n            else:\n                return False\n        else:\n            logging.debug(\"Task is not existing\")\n            return False\n\n\ndef get_session_id(username, password, login_url):\n    \"\"\"Authenticate with username and password and\n       retrieve icSessionId and serverUrl that are\n       used for Subsequent API calls\n    \"\"\"\n    session_id = ''\n    data = {'username': username, 'password': password}\n    # url = \"https://dm-us.informaticacloud.com/saas/public/core/v3/login\"\n    url = login_url\n\n    headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}\n    # We need to pass data in string instead of dict\n    # so that the data gets posted directly.\n    response = requests.post(url, data=json.dumps(data), headers=headers)\n    logging.info(f\"API Response Status Code: {str(response.status_code)}\")\n    server_url = 0\n    resp_json = None\n    try:\n        resp_json = response.json()\n        # ...\n    except ValueError:\n        # no JSON returned\n        pass\n    if response.status_code == 200:\n        logging.debug(response.text)\n        session_id = resp_json[\"userInfo\"][\"sessionId\"]  # INFA-SESSION-ID\n        server_url = resp_json[\"products\"][0][\"baseApiUrl\"]\n        logging.info(f\"Session Id: {session_id} and server_url: {server_url}\")\n    else:\n        logging.error('API call failed:')\n        logging.error(response.headers)\n        logging.error(resp_json)\n        exit(1)\n    return session_id, server_url\n\n\ndef logout_session(session_id, logout_url):\n    \"\"\"Use Session Id and Server URL to logout from API\"\"\"\n    logging.debug(f\"in logout_session with session_id: {session_id}\")\n    headers = {'Content-Type': 'application/json',\n               'INFA-SESSION-ID': session_id,\n               'Accept': 'application/json'}\n\n    response = requests.post(logout_url, headers=headers)\n    if response.status_code == 200:\n        logging.debug(\n            f\"session logout for session_id: {session_id} \"\n            f\"successful with status_code: {response.status_code}\")\n    else:\n        logging.error(\n            f\"session logout failed with status: {response.status_code}\")\n        # logging.info(response.content)\n        logging.error(f\"{response.content}\")\n        exit(1)\n\n\ndef lookup_global_id(session_id, server_url, path, task_type):\n    \"\"\"Use Session Id and Server URL from the user login API\n       to lookup the globalid for the given type and folder \"\"\"\n    logging.debug(\n        f\"in lookup_globalid with path: {path} and taskType: {task_type}\")\n    inf_url = server_url + \"/public/core/v3/lookup\"\n    # inf_url = \"https://dm-us.informaticacloud.com/saas/public/core/v3/lookup\"\n    logging.debug(f\"complete URL for Lookup: {inf_url}\")\n    headers = {'Content-Type': 'application/json',\n               'INFA-SESSION-ID': session_id,\n               'Accept': 'application/json'}\n    # data = {'path': path, 'type': taskType}\n    data = {\n        'objects': [\n            {\n                'path': path,\n                'type': task_type\n            }]\n    }\n\n    response = requests.post(inf_url, json=data, headers=headers)\n    global_id = 0\n    if response.status_code == 200:\n        global_id = response.json()[\"objects\"][0][\"id\"]\n        logging.debug(f\"Global Id: {global_id}\")\n        logging.debug(f\"header: {response.headers}\")\n        logging.debug(f\"content: {response.content}\")\n    else:\n        logging.error(\n            f\"lookup_global_id failed with status: {response.status_code}\")\n        # logging.info(response.content)\n        logging.error(f\"{response.content}\")\n        exit(1)\n    return global_id\n\n\ndef start_job_by_global_id(session_id, server_url, global_id, task_type,\n                           sleep_sec, logout_url, activity_log):\n    \"\"\"Use Session Id and Server URL from the user login API\n       and start the specified job\"\"\"\n    logging.debug(f\"in start_job_by_global_id with global_id = {global_id}\")\n    inf_url = server_url + \"/api/v2/job\"\n    headers = {'Content-Type': 'application/json',\n               'icSessionId': session_id,\n               'Accept': 'application/json'}\n    data = {'@type': 'job', 'taskFederatedId': global_id, 'taskType': task_type}\n    response = requests.post(inf_url, data=json.dumps(data), headers=headers)\n    resp_json = None\n    try:\n        resp_json = response.json()\n        # ...\n    except ValueError:\n        # no JSON returned\n        pass\n\n    if response.status_code == 200:\n        run_id = resp_json[\"runId\"]\n        task_name = resp_json[\"taskName\"]\n        task_id = resp_json[\"taskId\"]\n        logging.info(\n            f\"Job: {task_name} with Id: {task_id} and global_id: {global_id} \"\n            f\"has been successfully started with runId: {run_id}\")\n        # get the job status\n        get_activity_log(session_id, server_url, run_id, task_id, sleep_sec,\n                         logout_url, activity_log)\n    else:\n        logging.error(\n            f\"Job failed to start with status: {response.status_code}\")\n        # logging.info(response.content)\n        logging.error(f\"{response.content}\")\n        logout_session(session_id, logout_url)\n        exit(1)\n\n\ndef get_activity_log(session_id, server_url, run_id, task_id, sleep_sec,\n                     logout_url, activity_log):\n    \"\"\"polls the informatica cloud server in the provided sleep_sec-interval\n       to check if the job has been completed or failed.\n       In case of success the session log is retrieved.\n       In case of failure the error log is retrieved.\n    \"\"\"\n    global gl_last_time\n    rest = SbRestApi(gl_base_url_uac, gl_auth_uac)\n    # job_state = 99\n    task_name = ''\n    object_name = ''\n    logging.debug(\n        f\"in get_activity_log for Job with ID: {task_id}, \"\n        f\"run_id = {run_id} and sessionId = {session_id}\")\n    inf_url = f\"{server_url}/api/v2/activity/activityLog\" \\\n              f\"?runId={run_id}&taskId={task_id}\"\n    headers = {'Content-Type': 'application/json',\n               'icSessionId': session_id,\n               'Accept': 'application/json'}\n    while True:\n        if gl_time_difference:\n            time_now = time.time()\n            if time_now - gl_last_time > gl_time_difference:\n                gl_last_time = time_now\n                if not rest.check_task_status():\n                    logging.info(f\"Exiting\")\n                    exit(1)\n        response = requests.get(inf_url, headers=headers)\n        logging.debug(f\"Activity Log: {response.text}\")\n        resp_json = None\n        try:\n            resp_json = response.json()\n            # ...\n        except ValueError:\n            # no JSON returned\n            pass\n\n        if activity_log is True and response.text:\n            # pprint(response.json())\n            logging.info(json.dumps(resp_json, indent=4))\n\n        if response.status_code == 200:\n            try:\n                job_state = resp_json[0][\"state\"]\n                log_id = resp_json[0][\"id\"]  # Log entry ID\n                object_name = resp_json[0][\"objectName\"]\n                job_type = resp_json[0][\"type\"]\n                # 1 : task failed to complete successfully.\n                # 2 : task finished with errors\n                # 3 : task failed to complete\n            except Exception as unknown_exception:\n                logging.info(\n                    f\"No log entry found - continue after {sleep_sec} seconds\")\n                time.sleep(sleep_sec)\n                continue\n\n            if job_state == 1:\n                job_status = \"success\"\n                logging.info(\n                    f\"Status of Job {object_name} with task_id: {task_id}, \"\n                    f\"runId = {run_id} is: {job_status}({job_state})\")\n                logging.info(f\"retrieving session_log file\")\n                logging.debug(f\"log header: {response.headers}\")\n                logging.debug(f\"log content: {response.content}\")\n\n                # get_session_log(session_id, server_url, run_id, task_id,\n                #                 log_id, object_name, logout_url)\n                for entry_id in resp_json[0]['entries']:\n                    logging.info(entry_id['id'])\n                    item_id = entry_id['id']\n                    get_session_log_item(session_id, server_url, run_id,\n                                         task_id,\n                                         log_id, object_name, logout_url,\n                                         item_id)\n                break\n            elif job_state == 2:\n                job_status = \"errors\"\n                if job_type == \"WORKFLOW\":\n                    error_msg = resp_json[0][\"errorMsg\"]\n                else:\n                    error_msg = resp_json[0][\"entries\"][0][\"errorMsg\"]\n                logging.error(\n                    f\"Job {object_name} with task_id: {task_id}, \"\n                    f\"runId = {run_id} \"\n                    f\"has finished with {job_status}({job_state})\")\n                logging.error(f\"error message is: {error_msg}\")\n                get_error_log(session_id, server_url, run_id, task_id, log_id,\n                              object_name, logout_url)\n                # get_session_log(session_id, server_url, run_id, task_id,\n                #                 log_id,\n                #                 object_name, logout_url)\n                for entry_id in resp_json[0]['entries']:\n                    logging.info(entry_id['id'])\n                    item_id = entry_id['id']\n                    get_session_log_item(session_id, server_url, run_id,\n                                         task_id,\n                                         log_id, object_name, logout_url,\n                                         item_id)\n                    if entry_id['state'] == 2:\n                        get_error_log_item(session_id, server_url, run_id, task_id,\n                                      log_id,\n                                      object_name, logout_url, item_id)\n\n                logout_session(session_id, logout_url)\n                exit(1)\n            elif job_state == 3:\n                job_status = \"failed\"\n\n                if job_type == \"WORKFLOW\":\n                    error_msg = resp_json[0][\"errorMsg\"]\n                else:\n                    error_msg = resp_json[0][\"entries\"][0][\"errorMsg\"]\n\n                logging.error(\n                    f\"Job {object_name} with task_id: {task_id}, \"\n                    f\"runId = {run_id} \"\n                    f\"has {job_status}({job_state})\")\n                logging.error(f\"error message is: {error_msg}\")\n                # in status \"failed\" a session log is available,\n                # but no error log\n                # get_session_log(session_id, server_url, run_id, task_id,\n                #                 log_id,\n                #                 object_name, logout_url)\n                for entry_id in resp_json[0]['entries']:\n                    logging.info(entry_id['id'])\n                    item_id = entry_id['id']\n                    get_session_log_item(session_id, server_url, run_id,\n                                         task_id,\n                                         log_id, object_name, logout_url,\n                                         item_id)\n                logout_session(session_id, logout_url)\n                exit(1)\n        else:\n            logging.error(\n                f\"Job status could not be fetched, \"\n                f\"error code:: {response.status_code}\")\n            # logging.info(response.content)\n            logging.error(f\"{response.content}\")\n            logout_session(session_id, logout_url)\n            exit(1)\n\n\ndef get_session_log(session_id, server_url, run_id, task_id, log_id,\n                    object_name, logout_url):\n    # time.sleep(10)\n    \"\"\"get the session log after the job has been completed\"\"\"\n    # job_status = 99\n    logging.debug(\n        f\"in get_session_log for Job: {object_name}, runId = {run_id} \"\n        f\"and sessionId = {session_id}\")\n    inf_url = f\"{server_url}/api/v2/activity/activityLog/{log_id}/sessionLog\"\n    headers = {'Content-Type': 'application/json',\n               'icSessionId': session_id,\n               'Accept': 'application/json',\n               'Accept-Encoding': 'gzip'}\n    response = requests.get(inf_url, headers=headers)\n    if response.status_code == 200:\n        logging.info(\n            f\"Session Log for Job {object_name} with task_id: {task_id}, \"\n            f\"runId = {run_id}, sessionId = {session_id} and \"\n            f\"log id = {log_id} has been successfully fetched\")\n        logging.info(\n            f\"##### session log for task : {object_name}, \"\n            f\"runID: {run_id} and log Id: {log_id} #####\")\n\n        content_type = response.headers.get('content-type')\n        if \"zip\" in content_type:\n            input_zip = zipfile.ZipFile(io.BytesIO(response.content))\n            extracted = {name: input_zip.read(name) for name in\n                         input_zip.namelist()}\n            logging.info(str(extracted).replace(\"\\\\n\", \"\\n\"))\n        else:\n            logging.info(response.text)\n    else:\n        logging.error(\n            f\"Session Log for Job {object_name} with task_id: {task_id}, \"\n            f\"runId = {run_id} could not be fetched, \"\n            f\"error code: {response.status_code}\")\n        # logging.info(response.content)\n        logging.error(f\"{response.content}\")\n        logout_session(session_id, logout_url)\n        exit(1)\n\n\ndef get_session_log_item(session_id, server_url, run_id, task_id, log_id,\n                         object_name, logout_url, item_id):\n    # time.sleep(10)\n    \"\"\"get the session log after the job has been completed\"\"\"\n    # job_status = 99\n    logging.debug(\n        f\"in get_session_log for Job: {object_name}, runId = {run_id} \"\n        f\"and sessionId = {session_id}\")\n    inf_url = f\"{server_url}/api/v2/activity/activityLog/{log_id}/sessionLog?itemId={item_id}\"\n    headers = {'Content-Type': 'application/json',\n               'icSessionId': session_id,\n               'Accept': 'application/json',\n               'Accept-Encoding': 'gzip'}\n    response = requests.get(inf_url, headers=headers)\n    if response.status_code == 200:\n        logging.info(\n            f\"Session Log for Job {object_name} with task_id: {task_id}, \"\n            f\"runId = {run_id}, sessionId = {session_id} and \"\n            f\"log id = {log_id} has been successfully fetched\")\n        logging.info(\n            f\"##### session log for task : {object_name}, \"\n            f\"runID: {run_id} and log Id: {log_id} #####\")\n\n        content_type = response.headers.get('content-type')\n        if \"zip\" in content_type:\n            input_zip = zipfile.ZipFile(io.BytesIO(response.content))\n            extracted = {name: input_zip.read(name) for name in\n                         input_zip.namelist()}\n            logging.info(str(extracted).replace(\"\\\\n\", \"\\n\"))\n        else:\n            logging.info(response.text)\n    else:\n        logging.error(\n            f\"Session Log for Job {object_name} with task_id: {task_id}, \"\n            f\"runId = {run_id} could not be fetched, \"\n            f\"error code: {response.status_code}\")\n        # logging.info(response.content)\n        logging.error(f\"{response.content}\")\n        logout_session(session_id, logout_url)\n        exit(1)\n\n\ndef get_error_log(session_id, server_url, run_id, task_id, log_id, object_name,\n                  logout_url):\n    time.sleep(10)\n    \"\"\"get the error log after the job has finished with errors\"\"\"\n    # job_status = 99\n    logging.debug(\n        f\"in get_error_log for Job: {object_name}, \"\n        f\"runId = {run_id} and sessionId = {session_id}\")\n    inf_url = f\"{server_url}/api/v2/activity/errorLog/{log_id}\"\n    # /api/v2/activity/errorLog/id\n    headers = {'Content-Type': 'application/json',\n               'icSessionId': session_id,\n               'Accept': 'application/json'}\n    response = requests.get(inf_url, headers=headers)\n\n    if response.status_code == 200:\n        logging.info(\n            f\"Error Log for Job {object_name} with task_id: {task_id}, \"\n            f\"runId = {run_id}, sessionId = {session_id} and \"\n            f\"log id = {log_id} has been successfully fetched\")\n        logging.info(\n            f\"##### Error log for task: {object_name}, runId: {run_id} \"\n            f\"and log Id: {log_id} #####\")\n        logging.info(response.text)\n    else:\n        logging.error(\n            f\"Error Log for Job {object_name} with task_id: {task_id}, \"\n            f\"runId = {run_id} could not be fetched, \"\n            f\"error code: {response.status_code}\")\n        logging.error(\"Error log can be retrieved from the Informatica Monitor\")\n        # logging.info(response.content)\n        logging.error(f\"{response.content}\")\n        # logout_session(session_id, logout_url)\n        # exit(1)\n\n\ndef get_error_log_item(session_id, server_url, run_id, task_id, log_id, object_name,\n                  logout_url, item_id):\n    time.sleep(10)\n    \"\"\"get the error log after the job has finished with errors\"\"\"\n    # job_status = 99\n    logging.debug(\n        f\"in get_error_log for Job: {object_name}, \"\n        f\"runId = {run_id} and sessionId = {session_id}\")\n    inf_url = f\"{server_url}/api/v2/activity/errorLog/{log_id}?itemId={item_id}\"\n    # /api/v2/activity/errorLog/id\n    headers = {'Content-Type': 'application/json',\n               'icSessionId': session_id,\n               'Accept': 'application/json'}\n    response = requests.get(inf_url, headers=headers)\n\n    if response.status_code == 200:\n        logging.info(\n            f\"Error Log for Job {object_name} with task_id: {task_id}, \"\n            f\"runId = {run_id}, sessionId = {session_id} and \"\n            f\"log id = {log_id} has been successfully fetched\")\n        logging.info(\n            f\"##### Error log for task: {object_name}, runId: {run_id} \"\n            f\"and log Id: {log_id} #####\")\n        logging.info(response.text)\n    else:\n        logging.error(\n            f\"Error Log for Job {object_name} with task_id: {task_id}, \"\n            f\"runId = {run_id} could not be fetched, \"\n            f\"error code: {response.status_code}\")\n        logging.error(\"Error log can be retrieved from the Informatica Monitor\")\n        # logging.info(response.content)\n        logging.error(f\"{response.content}\")\n        # logout_session(session_id, logout_url)\n        # exit(1)\n\n\nif __name__ == '__main__':\n    main()\n",
    "sysId": "2319805c1be24fabb83751d0b4756822",
    "useCommonScript": false,
    "variablePrefix": "var",
    "waitForOutput": false
}